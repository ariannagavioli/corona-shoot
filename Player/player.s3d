#define START_WALK	 	16
#define END_WALK 		48
#define GRAVITY			9.8
#define DELTA_T			1.0/60
#define CAMERA_OFFSET	1.0

/* Player class */
class Player{
	
	var upper_mesh;
	var upper_object;
	
	var lower_mesh;
	var lower_object;
	
	var weapon_mesh;
	var weapon_object;
	
	var player_object;
	var camera;
	
	var position;				//[x,y,z] point in space of the player
	var camera_position;		//[x,y,z] point in space of the camera
	var angle;					//determines the direction the player is facing
	var camera_angle;			//determines the direction of the camera
	var step_velocity;			//how much player moves in one frame over the plane x-z (absolute value)
	var current_velocity;		//current player velocity (is signed, x-z)
	var step_angle;				//delta angle of one frame: how much rotation can be done in one frame
	var jumping_velocity;		//velocity over the y-axis
	
	var is_jumping;
	var jump_sound;
	var rotation_dir;			//indicates rotation direction
	
	var current_frame;			//current frame of the mesh
	
	var first_person_view;
	
	var life_points;
	var id;
	var name;
	
	var debug;
	
	init();
	draw();
	update_camera();
	setPosition(pos,ang);
	update_jump();
	update();
	debug_mode();
};

function player::init(){
	lower_mesh = CVmNewMesh("swat_lower.AAM");
	upper_mesh = CVmNewMesh("swat_upper.AAM");
	weapon_mesh = CVmNewMesh("rocketl.AAM");
	
	var scale_measure = lower_mesh.normalize(1);
	upper_mesh.scale(scale_measure);
	weapon_mesh.scale(scale_measure);
	
	lower_object = CVmObj(lower_mesh);
	upper_object = CVmObj(upper_mesh);
	weapon_object = CVmObj(weapon_mesh);
	
	player_object = CVmObj();
	camera = CameraGetCurrent();
	jump_sound = CVmVRAWav("jump.wav");
	
	player_object.addChild(lower_object);
	player_object.addChild(upper_object);
	player_object.addChild(weapon_object);
	
	angle = 0;
	camera_angle = 180;
	rotation_dir = 0;
	position = [0,0,0];				//[x,y,z]
	camera_position = [0,1.3,0];
	step_velocity = 0.08;
	step_angle = 1.0;	
	current_velocity = 0;
	current_frame = 0;
	
	/* Player is not jumping */
	jumping_velocity = 0;
	is_jumping = false;
	
	/* Third person view */
	first_person_view = true;
	
	life_points = 100;
	
	setPosition(position,angle);
	
	debug = false;
}

function player::update_camera(){
	
	/* 1st person*/
	if(first_person_view){
		camera_position = position + [0, 1.3, 0];		//Camera position = player position with a height offset from the ground
		camera_angle += rotation_dir * step_angle;		//Rotating the camera accordingly to the player
		camera_angle = camera_angle % 360;
	}
	
	/* 3rd person */
	else {
		camera.setTarget(position);
	}
	
	camera.setPosition(camera_position);			//Place where the player is, at 1m height
	camera.setRotation(camera_angle, [0,-1,0]);		//Rotate the camera accordingly to the player rotation
}

function player::setPosition(pos,ang){
	position = pos;
	player_object.setPosition(position);
	player_object.setRotation(angle,[0,1,0]);			//Rotate the player around y-axis
}

function player::update_jump(){
		
	position[1] += jumping_velocity * DELTA_T;
	jumping_velocity -= GRAVITY * DELTA_T;
	
	if(position[1] <= 0){
		is_jumping = false;
		position[1] = 0;
	}
}

function player::update()
{
	var previous_velocity = current_velocity;
	current_velocity = 0;
	rotation_dir = 0;
	
	if (keypressed(VK_UP))
		current_velocity = step_velocity;
	else if (keypressed(VK_DOWN))
		current_velocity = -step_velocity;	
	
	if (keypressed(VK_RIGHT)){
		angle -= step_angle;
		angle = angle % 360;
		
		rotation_dir = -1;
	}
    else if(keypressed(VK_LEFT)){
        angle += step_angle;
    	angle = angle % 360;  
    	
    	rotation_dir = 1;
    }
    
    /* Jump, only if not already jumping*/
    if( (keypressed(VK_SPACE) && !is_jumping)){
    	is_jumping = true;
    	jumping_velocity = 4.5;
    	jump_sound.play();
    }
    /* If player is jumping, update jump dynamics*/
    if(is_jumping){
    	current_velocity = previous_velocity;
    	update_jump();
    }
	/* Update the mesh */
	if(!is_jumping && current_velocity != 0){
		current_frame += 1;
		current_frame = current_frame % (END_WALK - START_WALK);
	}
	
	/* Switching the camera setting */
	if(keyboard() == "v"){
		debug = false;
		first_person_view = !first_person_view;
		if(first_person_view)
			camera.free();				// Frees the camera from the target
	}
    
    position[0] += current_velocity * sin(angle / 180.0 * PI);	// x-component
    position[2] += current_velocity * cos(angle / 180.0 * PI);	// z-component
    
    if(!debug)
    	update_camera();
	
	setPosition(position, angle);		
}

function player::draw()
{
	if(current_velocity != 0)
		player_object.draw(VR_FRAMENUMBER,START_WALK + current_frame);
	else
		player_object.draw(VR_FRAMENUMBER,0);
}

function player::debug_mode(){
	debug = true;
}
