/* Level class */
class level {
	var Light0;
	var Light1;
	
	/* Walls */
	var wall_mesh;
	var lower_wall_mesh;
	var wall_obj_array;
	var wall_material;
	var wall_texture;
	
	/* Floor */
	var floor_mesh;
	var floor_material;
	var floor_texture;
	
	/* Sky */
	var sky_mesh;
	var sky_material;
	var sky_texture;
	
	/* Dimensions */
	var num_rows;
	var num_columns;
	
	/* Maze matrix */
	var matrix;
	
	init(level_textfile);
	setRandomPosition(obj);
	wallCollision(point);
	floorDistance(point);
	draw();
};

function level::init(level_textfile){
	wall_texture = CVmTexture("Mattoni04.png");
	wall_material = CVmMaterial();
	wall_material.SetTexture(wall_texture);
	wall_material.ChangeTextureParams(VR_V_TILING, 3);
	
	wall_obj_array = array(0);
	wall_mesh = CVmNewMesh(VRP_BOX);
	wall_mesh.SetMaterial(wall_material);
	wall_mesh.Scale(1,4.7,1);
	
	lower_wall_mesh = CVmNewMesh(VRP_BOX);
	lower_wall_mesh.SetMaterial(wall_material);
	lower_wall_mesh.Scale(1,1,1);
	
	var f = LoadFile(level_textfile);

	num_rows = len(f);
	num_columns = len(f[0]);
	
	matrix = Array(num_rows);
	
	for(var i=0; i< num_rows; i++)
	{
		matrix[i] = Array(num_columns);
		
		for(var j=0; j< num_columns; j++)
		{
			matrix[i][j] = f[i][j];
			
			if (f[i][j] == "*")
			{
				var t = CVmObj(wall_mesh);
				t.SetPosition(j,0,i);
				aadd(wall_obj_array,t);
			}
			else if(f[i][j] == "+")
			{
				var t = CVmObj(lower_wall_mesh);
				t.SetPosition(j,0,i);
				aadd(wall_obj_array,t);
			}
			matrix[i][j] = f[i][j];		
		}
	}	
	
	/* initialize light */
	Light0 = CVmLight();
	Light0.SetPosition([num_columns / 2.0, 40, num_rows / 2.0]);
	Light0.SetDiffuse(1, 1, 1);
	Light0.Enable();
	
	Light1 = CVmLight();
	Light1.setAmbient(0.6,0.6,0.6);
	Light1.Enable();
	
	floor_material = CVmMaterial();
	floor_texture  = CVMtexture("grass.jpg");
	floor_material.SetTexture(floor_texture);
	floor_material.ChangeTextureParams(VR_U_TILING,4);
	floor_material.ChangeTextureParams(VR_V_TILING,4);
	
	
	floor_mesh = CVmNewMesh(VRP_BOX);
	floor_mesh.scale(num_columns,1,num_rows);
	floor_mesh.translate(0,-1,0);
	floor_mesh.SetMaterial(floor_material);
	floor_mesh.ModulateMaterials(0,1,0,1);	
	
	sky_mesh = CVmNewMesh("sky.AAM");
	sky_mesh.scale(num_rows*1.2, 1, num_columns*1.2);
	sky_mesh.translate(num_rows / 2.0, 0 , num_columns / 2.0);
}

function level::setRandomPosition(obj){
	var x;
	var z;
	var angle;
	
	x = Rand(len(matrix[0]) - 1);
	z = Rand(len(matrix) - 1);
	
	while(matrix[z][x] != " "){		// The spot is taken by a wall
		x = Rand(len(matrix[0]) - 1);
		z = Rand(len(matrix) - 1);
	}
	
	angle = Rand(3);
	angle *= 90;					// either 0°, 90*, 180° or 270°
	
	obj.setPosition([x + 0.5, 0, z + 0.5],angle);
}

function level::wallCollision(point){
	if(point[0] < 0 || point[0] > num_columns - 1)
		return true;
	if(point[2] < 0 || point[2] > num_rows - 1)
		return true;
	if(matrix[point[2]][point[0]] == "*")
		return true;
	if(matrix[point[2]][point[0]] == "W")
		return true;
	if(matrix[point[2]][point[0]] == "A")
		if (point[1] < 0.4)
			return true;
	if(matrix[point[2]][point[0]] == "H")
		if (point[1] < 0.4)
			return true;
	if(matrix[point[2]][point[0]] == "+")
		if(point[1] < 1)
			return true;
	
	return false;
}

/* Assumes point is in the matrix boundary */
function level::floorDistance(point) {
	if(matrix[point[2]][point[0]] == "*")
		return point[1] - 3;
	else if(matrix[point[2]][point[0]] == "+")
		return point[1] - 1;
	else if(matrix[point[2]][point[0]] == "A")
		return point[1] - 0.4;
	else if(matrix[point[2]][point[0]] == "H")
		return point[1] - 0.4;
	else if(matrix[point[2]][point[0]] == " ")
		return point[1];
}

function level::draw(){
	foreach (var t in wall_obj_array)
		t.Draw();
	floor_mesh.draw();
	sky_mesh.draw();
}