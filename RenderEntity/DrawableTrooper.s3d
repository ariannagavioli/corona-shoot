/* Drawable trooper */
#ifndef DRAWABLE_TROOPER_S3D
#define DRAWABLE_TROOPER_S3D 

#include "DrawablePerson.s3d"
#include "DrawableArmament.s3d"

class DrawableTrooper {
// Properties
	var body;		// DrawablePerson
	var weapon;		// Weapons
	var frame;		// frame number to draw
	var jump_sound;	
// Methods
	setPosition(pos, angle);
	playJump(listener);
	draw(frame_number);
};

function DrawableTrooper::DrawableTrooper() {
	body = DrawablePerson();
	weapon = DrawableArmament(body.scaleMeasure);


	body.addArmament(weapon.railGun.obj);
	body.addArmament(weapon.rocketLauncher.obj);
	frame = 0;
	
	jump_sound = CVmVRAWav("jump.wav");
}

function DrawableTrooper::setPosition(pos, angle) {
	body.setPosition(pos);
	body.setRotation(angle);
}


function triangularF(angle) {
	var balance;

	if (angle > (PI/2.0)) {
		balance = (-2.0 * angle / PI + 2.0);
	} else if (angle < -(PI / 2.0)) {
		balance = (-2.0 * angle / PI - 2.0);  
	} else {
		balance = (2.0 * angle / PI);
	}

	return balance;
}

function rerangeD(angle) {
	if (angle > 180.0)
		return (angle - 360);
	else if (angle < -180.0)
		return (angle + 360);
	return angle;
}

function DrawableTrooper::playJump(listener) {
	var sourceDistance;
	var source = [55.0, 0.0, 15.0];
	var SL = source - listener.pos;
	var theta = atan2(SL[0], SL[2]);
	var anglePiPi = rerangeD(listener.angle);
	sourceDistance = modulus(SL);
	jump_sound.setBalance(sin(theta - anglePiPi * PI / 180.0));
	// jump_sound.setBalance(triangularF(theta - anglePiPi * PI / 180.0));
	jump_sound.setVolume(1 - sourceDistance/180);
	OutputLN(listener.pos);
	jump_sound.play();
}

function DrawableTrooper::draw(frame_number) {
	body.obj.draw(VR_FRAMENUMBER, frame_number);
}

#endif
