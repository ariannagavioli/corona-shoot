/* SYSTEM */
#ifndef SYSTEM_S3D
#define SYSTEM_S3D 

#include "../Player/Enemy.s3d"
#include "../Player/Myself.s3d"

#define SYS_GRAVITY			9.8
#define SYS_DELTA_T			1.0 / 60

class System {
// System components
	drawTrooper(trooper);
	jump(trooper);
	updateTrooper(trooper);
	MoveTrooper(obj);
	pointOfView(obj);
	selectWeapon(obj);
	showScoreTable(j, obj);
	showMyName(myAlias);
	collition(obj1, obj2);
	sendKinematics(kinematics_owner, m_ses, obj);
};

function System::showMyName(trooper) {
	ConsoleText(0.43, 0.9, "Welcome Back " + trooper.tagID.name);
}

function System::sendKinematics(kinematics_owner, m_ses, obj) {
	m_ses.sendKinematics(kinematics_owner, obj.m_kinematics);
}

function System::showScoreTable(j, obj) {
	ConsoleText(0.05, 0.9 - 0.03*j, obj.tagID.name + "'s Score: " + str(obj.m_health.life_points));
}

function System::selectWeapon(trooper) {
	static var pressed = false;
	var pressed2 = KeyPressed("f"); 

	if((pressed == false) && (pressed2 == true)) 
		trooper.weapon = true;	
	pressed = pressed2;
}

function System::drawTrooper(trooper) {
	if (trooper.weapon) {
		trooper.drawable.weapon.toggle();
		trooper.weapon = false;
	} 
	if (trooper.m_kinematics.vel != 0)
		trooper.drawable.draw(START_WALK_SWAT + trooper.drawable.frame);
	else 
		trooper.drawable.draw(0);
	
	trooper.drawable.setPosition(trooper.m_kinematics.pos, trooper.m_kinematics.angle);
	
	if(trooper.m_kinematics.just_jumped){
		trooper.drawable.playJump();
		trooper.m_kinematics.just_jumped = false;
	}
}

function System::jump(trooper) {
    /* Jump, only if not already jumping*/
	if(KeyPressed(VK_SPACE) && !trooper.m_kinematics.is_jumping) {
		trooper.m_kinematics.is_jumping = true;
		trooper.m_kinematics.just_jumped = true;
		trooper.m_kinematics.vertical_velocity = 4.5;
	}

    /* If player is jumping, update jump dynamics*/
    if(trooper.m_kinematics.is_jumping){
    	trooper.m_kinematics.vel = trooper.m_kinematics.prev_velocity;
    	/* update_jump(); */
    	trooper.m_kinematics.pos[1] += trooper.m_kinematics.vertical_velocity * SYS_DELTA_T;
		trooper.m_kinematics.vertical_velocity -= SYS_GRAVITY * SYS_DELTA_T;

		if (trooper.m_kinematics.pos[1] <= 0) {
			trooper.m_kinematics.is_jumping = false;
			trooper.m_kinematics.pos[1] = 0;
		}
    }
}

function System::MoveTrooper(trooper) {
	trooper.m_kinematics.rotation_dir = 0;
	trooper.m_kinematics.prev_velocity = trooper.m_kinematics.vel;
	trooper.m_kinematics.vel = 0;

	if (KeyPressed("w"))
		trooper.m_kinematics.vel = trooper.m_kinematics.step_velocity;
	else if (KeyPressed("s"))
		trooper.m_kinematics.vel = -trooper.m_kinematics.step_velocity;

	if (KeyPressed("d")){
		trooper.m_kinematics.angle -= trooper.m_kinematics.step_angle;
		trooper.m_kinematics.angle = trooper.m_kinematics.angle % 360;
		
		trooper.m_kinematics.rotation_dir = -1;
	}
    else if(KeyPressed("a")){
        trooper.m_kinematics.angle += trooper.m_kinematics.step_angle;
    	trooper.m_kinematics.angle = trooper.m_kinematics.angle % 360;  
  
    	trooper.m_kinematics.rotation_dir = 1;
    }	

//    trooper.m_kinematics.pos[0] += trooper.m_kinematics.vel * sin(trooper.m_kinematics.angle / 180.0 * PI);	// x-component
//    trooper.m_kinematics.pos[2] += trooper.m_kinematics.vel * cos(trooper.m_kinematics.angle / 180.0 * PI);	// z-component
}

function System::updateTrooper(trooper) {
	trooper.m_kinematics.pos[0] += trooper.m_kinematics.vel * sin(trooper.m_kinematics.angle / 180.0 * PI);	// x-component
    trooper.m_kinematics.pos[2] += trooper.m_kinematics.vel * cos(trooper.m_kinematics.angle / 180.0 * PI);	// z-component
	
	if (trooper.m_kinematics.vel != 0 && !trooper.m_kinematics.is_jumping) {
		trooper.drawable.frame += 1;
		trooper.drawable.frame = trooper.drawable.frame % (END_WALK_SWAT - START_WALK_SWAT);
	}
}

function System::pointOfView(obj) {
 
	if (keyboard() == "v") {				//DON'T USE KEYPRESSED FUNCTION
		obj.cam.view = !obj.cam.view;
		OutputLN(obj.cam.view);
		obj.cam.cam.Free();					// it frees from setTarget;
	}


	/* 1st Person */
	if (obj.cam.view) {	
		obj.cam.pos = obj.m_kinematics.pos + [0, 1.3, 0];		//Camera position = player position with a height offset from the ground
		obj.cam.angle = obj.m_kinematics.angle + 180.0;
		obj.cam.angle = obj.cam.angle % 360;			
		obj.cam.cam.setRotation(obj.cam.angle, [0,-1,0]);				//Rotate the camera accordingly to the player rotation
	}
	/* 3rd Person */
	else {
		if(keyPressed(VK_UP) && obj.cam.offset > MIN_CAM_OFFSET)		//Getting closer to the trooper
			obj.cam.offset -= 0.1;
			
		if(keyPressed(VK_DOWN) && obj.cam.offset < MAX_CAM_OFFSET)		//Distantiating from the trooper
			obj.cam.offset += 0.1;
		
		obj.cam.pos[0] = obj.m_kinematics.pos[0] - obj.cam.offset * sin(obj.m_kinematics.angle * PI / 180.0);
		obj.cam.pos[1] = obj.m_kinematics.pos[1] + 2;
		obj.cam.pos[2] = obj.m_kinematics.pos[2] - obj.cam.offset * cos(obj.m_kinematics.angle * PI / 180.0);
		obj.cam.cam.setTarget(obj.m_kinematics.pos + [0, 1.3, 0]);
	}
	obj.cam.cam.setPosition(obj.cam.pos);
}

#endif
