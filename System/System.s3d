/* SYSTEM */
#ifndef SYSTEM_S3D
#define SYSTEM_S3D 

#include "../Player/Enemy.s3d"
#include "../Player/Myself.s3d"
#include "../Audio/AudioFXSystem.s3d"
#include "../Level/ResourcesManager.s3d"
#include "../RenderEntity/Console.s3d"

#define SYS_GRAVITY			9.8
#define SYS_DELTA_T			1.0 / 60

#define TROOPER_STEP_ANGLE		1.0
#define TROOPER_STEP_VELOCITY	0.08

class System {
	// System components
	var audioFX;
	var TD_manager;
	/* Render actions */
	drawTrooper(trooper, me);
	updateTrooper(trooper);
	showDistanceTable(j, obj);
	showMyInfo(myAlias);
	drawResource(res, me);

	/* Physics */
	computeDistances(troopers, index, c_pos);
	updateBullet(trooper, id, level);

	/* Human interaction */
	MoveTrooper(trooper, level);
	pointOfView(obj);
	selectWeapon(obj);
	reload(me);
	updateHealth(m_sess, me);
	showHelp();
	shoot(trooper);

	/* Network */
	sendKinematics(kinematics_owner, m_ses, obj);
	sendEvent(m_ses, obj);
};

function System::System() {
	audioFX = AudioFXSystem();
	TD_manager = TrooperDrawerManager();
	ConsoleSetDefault();	
}

function system::showHelp() {
	if(KeyPressed(VK_ESCAPE)) 
		ConsolePlotHelp();
}

function System::reload(trooper) {
	if(KeyPressed("r") && trooper.ammo.readyToReload && trooper.life.life > 0) {
		trooper.ammo.reload();
		trooper.ammo.readyToReload = false;
	}
}

function System::updateHealth(m_sess, trooper) {
	static var prevTime = GetTime();
	var currTime = GetTime();
	if (trooper.life.life <= 0) {
		m_sess.closeTCP();
	} else {
		if (currTime - prevTime > 2000) {
			trooper.life.life--;
			prevTime = currTime;
		}

		if (KeyPressed("h") && trooper.life.readyToTakePainkillers) {
			trooper.life.life = MAX_LIFE_POINTS;
			trooper.life.readyToTakePainkillers = false;
		}  

		if (KeyPressed("e") && trooper.life.readyToTakePainkillers) {
			trooper.winner = trooper.tagID.number;
			trooper.life.readyToTakePainkillers = false;
		}
	}

}

function System::drawResource(res, me) {
	// The resources are Ammunition Box and the First Aid Kit 
	// The resources are only Draw when Myself is close to one of them.
	var dst;													// Distance from Myself to the Any resource.
	for (var i = 0; i < res.length; i++) {						// Iterate over all resources.
		dst = modulus(res.res[i].pos - me.m_kinematics.pos);	// Compute Distances.
		
		if (dst < 15) 											// If the Distances is less the 10 units 
			res.draw(i);										// the ith resources will be draw.

		if (dst < 1.5) {										// If the Distance is smaller than 1.5 units
			if (res.res[i].type == AMMO_BOX) {					// check if the resources is a Ammunition Box. 
				ConsoleText(0.48, 0.53, "Press R to RELOAD");	// if so, Display "Press R to Reload".
				me.ammo.readyToReload = true;					// Enable a switch that tells it's possible 
			}													// to reload now.

			if (res.res[i].type == FIRST_AID_KIT) {				// If the the Resource is a First Aid Kit,
				ConsoleText(0.48, 0.5, "Press H to Take Painkillers");	// show "Press H to Take Painkillers".
				me.life.readyToTakePainkillers = true;			// Enable a switch that tells it's possible to 
			}

			if (res.res[i].type == CURE_WIN) {				// If the the Resource is the Ultimate Cure,
				if (me.winner < 0) {					
					ConsoleText(0.48, 0.5, "Press E to Take the Cure");	// show "Press E to Interact".
					me.life.readyToTakePainkillers = true;			// Enable a switch that tells it's possible to 
				}
			}													// to take the Painkillers now.
		}

	}
}

function System::shoot(trooper) {
	// In order to shoot the player has to click on the left Button of the mouse 
	// But also the last bullet/rocket had to be done, and the trooper's bag has to
	// have at least one bullet in whatever gun the trooper is carrying right now
	if(Mouse.ButtonL && trooper.ammo.life == 0 && trooper.ammo.bag() != 0 && trooper.life.life > 0) {	// When Left Mouse Button is clicked and the 
		/* Computing the Weapong Direction in order to execute the trajectory of the wweapon */
		trooper.ammo.m_kinematics.pos = trooper.m_kinematics.pos;
		trooper.ammo.life = 100;
		trooper.ammo.fire = true;
		/* Given the the bullet/rocket is not coming from the center of the soldier but from the canon of the weapon, 
		the right position has to be set*/
		trooper.ammo.m_kinematics.pos[0] += -trooper.m_kinematics.orientation[2] * 0.2;
		trooper.ammo.m_kinematics.pos[2] += trooper.m_kinematics.orientation[0] * 0.2;
		trooper.ammo.m_kinematics.pos[1] += 1.3;

		trooper.ammo.m_kinematics.angle = trooper.m_kinematics.angle * PI / 180.0;
		trooper.ammo.m_kinematics.orientation = trooper.m_kinematics.orientation;
		/* Decrease the number of bullets of whatever gun the trooper is carrying */
		trooper.ammo.decrease();
	}

}

function checkBulletHit(troopers, id, pos) {
	// Check if my bullet hit any enemy
	var length = len(troopers);
	var d;
	for (var i = 0; i < length; ++i) {
		if ((i != id) && (troopers[i].tagID.number > 0)) {	// if it's an Available enemy
			d = modulus(troopers[i].m_kinematics.pos - pos);	// compute distance from bullet to other players
			if (d < 1.4) {	// if it's smaller than this, then the enemy was reached
				troopers[id].shot = i; // Myself gets who was shot
				return true;
			}
		}
	}
	return false;
}

function System::updateBullet(troopers, id, level) {
	// Updates bullet position and detects collision with walls or
	// enemies
	var me = troopers[id];
	me.ammo.m_kinematics.send = false;
	if(me.ammo.life > 0) {
		me.ammo.life--;
		var tmpPos = me.ammo.nextPosition();	// gets possible next position
		var wall = level.wallCollision(tmpPos);	// detects if there's a wall collision
		var coll = checkBulletHit(troopers, id, tmpPos);	// detects if there's with the potential position

		if (wall || coll) {	// Either a collision against wall or enemy, 
			me.ammo.life = 0;	// the life is set to zero
		}
		else {
			me.ammo.m_kinematics.pos = tmpPos;	// if no collision, the bullet keeps going  
			me.ammo.m_kinematics.vel = me.ammo.life;
		}
		if (me.ammo.life == 0) me.ammo.ended = true;
		me.ammo.m_kinematics.send = true;
	}
}


function System::sendEvent(m_ses, trooper) {
	/* Send weapon switch */
	if(trooper.weaponSwitch) {	// sends if weapon was switch
		m_ses.sendEvent(WEAPON_SWITCH_PDU);
		trooper.weaponSwitch = false;
	}

	if(trooper.m_kinematics.just_jumped)	// sends if jumping has executed
		m_ses.sendEvent(JUMP_SCREAM_PDU);

	if(trooper.shot > -1) {
		m_ses.sendInjuried(trooper.shot, trooper.ammo.getDammage());
		trooper.shot = -1;
	}

	if (trooper.winner > -1) {
		m_ses.sendWinner(trooper.winner);
	}

	if (trooper.ammo.ended) {
		m_ses.sendEvent(AMMO_LIFE_ENDED);
		trooper.ammo.ended = false;
	}

	if (trooper.ammo.fire) {
		m_ses.sendEvent(FIRE_AMMO_PDU);
	}
}

function System::showMyInfo(trooper) {
	// My Name
	ConsoleText(0.43, 0.9, "Welcome Back " + trooper.tagID.name);
	// My health
	ConsoleText(0.05, 0.10, "Health " + str(trooper.life.life));
	// My Ammution Available
	ConsoleText(0.05, 0.05, "Ammution " + trooper.ammo.getName() + " " + str(trooper.ammo.bag()));
	// check Console

	if (trooper.winner > -1) {
		if (trooper.winner == trooper.tagID.number) {
			ConsolePlotWinner();
			audioFX.playWinner();
		} else  {
			ConsolePlotLooser();
			audioFX.playFailed();
		}
	} else if (trooper.life.life <= 0) {
		ConsolePlotGameOver();
		audioFX.playDeath();
	}
	
}

function System::sendKinematics(kinematics_owner, m_ses, obj) {
	if (obj.m_kinematics.send) {
		m_ses.sendKinematics(kinematics_owner, obj);
		obj.m_kinematics.send = false;
	}
}

function System::showDistanceTable(j, obj) {
	if (obj.life.dstToCure > 0) 
		ConsoleText(0.05, 0.9 - 0.03*j, obj.tagID.name + "'s away from Cure: " + str(floor(obj.life.dstToCure)));
	else 
		ConsoleText(0.05, 0.9 - 0.03*j, obj.tagID.name + "'s away from Cure: Error");
}		

function System::selectWeapon(trooper) {
	static var pressed = false;
	var pressed2 = KeyPressed("f"); 

	if((pressed == false) && (pressed2 == true)) {
		trooper.weaponSwitch = true;
		trooper.ammo.type = 1 - trooper.ammo.type;
	}
	pressed = pressed2;
}

function System::drawTrooper(trooper, me) {
	TD_manager.setWeapon(trooper.ammo.type);

	TD_manager.setPosition(trooper.m_kinematics.pos, trooper.m_kinematics.angle);
	if (trooper.m_kinematics.vel != 0) {
		TD_manager.drawFrame(trooper.frame);
	}
	else 
		TD_manager.drawStill();
	
	if(trooper.m_kinematics.just_jumped) {
		audioFX.playJump(trooper.m_kinematics, me.m_kinematics);
		trooper.m_kinematics.just_jumped = false;
	}

	if(trooper.ammo.life > 0) {
		OutputLN("Im herre ", trooper.ammo.life);
		if(trooper.ammo.fire) {
			audioFX.playShoot(trooper.m_kinematics, me.m_kinematics);
			trooper.ammo.fire = false;
		}

		TD_manager.drawBullet(trooper.ammo.m_kinematics.pos, trooper.ammo.size());
	}
}

function System::MoveTrooper(trooper, level) {
	var prev_velocity = trooper.m_kinematics.vel;
	trooper.m_kinematics.vel = 0;
	trooper.m_kinematics.send = false;

	if (KeyPressed("w")) {
		trooper.m_kinematics.vel = TROOPER_STEP_VELOCITY;
		audioFX.playEncouraging();	// This will be played only once, at the first step
		trooper.m_kinematics.send = true;
	}
	else if (KeyPressed("s")) {
		trooper.m_kinematics.vel = -TROOPER_STEP_VELOCITY;
		trooper.m_kinematics.send = true;
	}

	if (KeyPressed("d")) {
		trooper.m_kinematics.angle -= TROOPER_STEP_ANGLE;
		trooper.m_kinematics.send = true;
	}
    else if(KeyPressed("a")) {
        trooper.m_kinematics.angle += TROOPER_STEP_ANGLE;
		trooper.m_kinematics.send = true;
    }
	trooper.m_kinematics.angle = trooper.m_kinematics.angle % 360;
    
    /* Jump, only if not already jumping*/
	if(KeyPressed(VK_SPACE) && !trooper.m_kinematics.is_jumping) {
		trooper.m_kinematics.is_jumping = true;
		trooper.m_kinematics.just_jumped = true;			// Need this to play the jump sound
		trooper.m_kinematics.vertical_velocity = 4.5;
	}
	
	var controlPoints = 12;
	var boundPoints = trooper.getCircPoints(controlPoints);

    /* If player is jumping, update jump dynamics*/
    if(trooper.m_kinematics.is_jumping){
    	trooper.m_kinematics.vel = prev_velocity;
    	var new_y = trooper.m_kinematics.pos[1] + trooper.m_kinematics.vertical_velocity * SYS_DELTA_T;
		trooper.m_kinematics.vertical_velocity -= SYS_GRAVITY * SYS_DELTA_T;
		
		var floor_distance = level.floorDistance([trooper.m_kinematics.pos[0], new_y, trooper.m_kinematics.pos[2]]);

		if (floor_distance <= 0) {						// if the player has landed on the floor / on a wall
			trooper.m_kinematics.is_jumping = false;
			new_y = new_y - floor_distance;
		}
		
		trooper.m_kinematics.pos[1] = new_y;
		trooper.m_kinematics.send = true;
    }
    else {	 		// Check whether the player is falling off
    	var floor_distance = Array(len(boundPoints));
    	var isOnTheFloor = false;
    	
    	/* Check if every bounding point is not supported by a floor */
    	for(var i = 0; i < len(boundPoints); i++){
    		floor_distance[i] = level.floorDistance(boundPoints[i]);
    		if(floor_distance[i] <= 0 && floor_distance[i] >= -0.1)
    			isOnTheFloor = true;
    	}
    	
    	if (!isOnTheFloor) {					// The player is falling, e.g. it steps away from a wall -> it falls on the ground, but doesn't jump
    		
    		trooper.m_kinematics.vertical_velocity -= SYS_GRAVITY * SYS_DELTA_T;
    		var delta_fall = trooper.m_kinematics.vertical_velocity * SYS_DELTA_T;
    		
    		/* Point with max distance from the floor */
    		var idx_max = 0;
    		for(var i = 1; i < len(floor_distance); i++)
    			if(floor_distance[i] > floor_distance[idx_max])
    				idx_max = i;
    			
    			
    		if(abs(delta_fall) > floor_distance[idx_max] && floor_distance[idx_max] > 0)
				trooper.m_kinematics.pos[1] -= floor_distance[idx_max];
			else
				trooper.m_kinematics.pos[1] += delta_fall;
		}
		
		else {										// If player is not falling, reset the vertical velocity to 0
			trooper.m_kinematics.vertical_velocity = 0;
		}
    }
    if (trooper.m_kinematics.vel != prev_velocity)
    	trooper.m_kinematics.send = true;

    var pos = Array(3);		// contains the next candidate position

    var angle_rad = trooper.m_kinematics.angle / 180.0 * PI;
    var orientation = [sin(angle_rad), 0.0, cos(angle_rad)];

    pos = trooper.m_kinematics.pos + trooper.m_kinematics.vel * orientation;
    trooper.m_kinematics.orientation = orientation;

	var left_x = Array(controlPoints / 2 - 1);
	var right_x = Array(controlPoints / 2 - 1);
	var up_z = Array(controlPoints / 2 - 1);
	var bottom_z = Array(controlPoints / 2 - 1);
    
    for(var i = 0; i < controlPoints; i++){
    	if(  i > 0 && i < controlPoints / 2 )
    		left_x[i - 1] = boundPoints[i];
    	if( i > controlPoints / 2 )
    		right_x[ i - controlPoints / 2 - 1] = boundPoints[i];
    	if( i < controlPoints / 4 )
    		up_z[i] = boundPoints[i];
    	if( i > (controlPoints * 3 / 4) )
    		up_z[i - controlPoints / 2 - 1] = boundPoints[i];
    	if( i > controlPoints / 4 && i < controlPoints * 3 / 4)
    		bottom_z[i - controlPoints / 4 - 1] = boundPoints[i];
    }
    
    var left_collision = false;
    var right_collision = false;
    var up_collision = false;
    var bottom_collision = false;
    
    for(var i = 0; i < controlPoints / 2 - 1; i++){
    	left_collision = left_collision || level.wallCollision(left_x[i]);
    	right_collision = right_collision || level.wallCollision(right_x[i]);
    	up_collision = up_collision || level.wallCollision(up_z[i]);
    	bottom_collision = bottom_collision || level.wallCollision(bottom_z[i]);
    }
    
    var angle = ( trooper.m_kinematics.angle + 360 );
	if(trooper.m_kinematics.vel < 0)		//angle the trooper looks at is the opposite wrt direction of movement
		angle += 180;
	angle = angle % 360;
	
	if( (!right_collision && !left_collision)			//No collision over x
		|| ( right_collision && angle <= 180 )			//Collision on the right, but the player is moving left
		|| ( left_collision && angle >= 180 ) )			//Collision on the left, but the player is moving right
    		trooper.m_kinematics.pos[0] = pos[0];		// update x-component
    
    if( (!up_collision && !bottom_collision)							//No collision over z
    	|| ( up_collision && ( angle >= 90 && angle <= 270 ) )			//Collision on the top, but player is moving down
    	|| ( bottom_collision && ( angle <= 90 || angle >= 270 ) ) )	//Collision on the bottom, but player is moving up
    		trooper.m_kinematics.pos[2] = pos[2];						// update z-component
	
}

function System::updateTrooper(trooper) {
	if (trooper.m_kinematics.vel != 0 && !trooper.m_kinematics.is_jumping) {
		trooper.frame += 1;
		trooper.frame = trooper.frame % (END_WALK_SWAT - START_WALK_SWAT);
	}
}

function System::pointOfView(obj) {
 
	if (keyboard() == "v") {
		obj.cam.view = !obj.cam.view;
		obj.cam.cam.Free();					// it frees from setTarget;
	}


	/* 1st Person */
	if (obj.cam.view) {	
		obj.cam.pos = obj.m_kinematics.pos + [0, 1.3, 0];				//Camera position = player position with a height offset from the ground
		obj.cam.angle = obj.m_kinematics.angle + 180.0;
		obj.cam.angle = obj.cam.angle % 360;			
		obj.cam.cam.setRotation(obj.cam.angle, [0,-1,0]);				//Rotate the camera accordingly to the player rotation
	}
	/* 3rd Person */
	else {
		if(keyPressed(VK_UP) && obj.cam.offset > MIN_CAM_OFFSET)		//Getting closer to the trooper
			obj.cam.offset -= 0.1;
			
		if(keyPressed(VK_DOWN) && obj.cam.offset < MAX_CAM_OFFSET)		//Distantiating from the trooper
			obj.cam.offset += 0.1;
		
		obj.cam.pos[0] = obj.m_kinematics.pos[0] - obj.cam.offset * sin(obj.m_kinematics.angle * PI / 180.0);
		obj.cam.pos[1] = obj.m_kinematics.pos[1] + 2;
		obj.cam.pos[2] = obj.m_kinematics.pos[2] - obj.cam.offset * cos(obj.m_kinematics.angle * PI / 180.0);
		obj.cam.cam.setTarget(obj.m_kinematics.pos + [0, 1.6, 0]);
	}
	obj.cam.cam.setPosition(obj.cam.pos);
}

function System::computeDistances(troopers, index, c_pos) {
	var length = len(troopers);
	var m_pos = troopers[index].m_kinematics.pos;
	var d;
	for (var i = 0; i < length; ++i) {
		if ((i != index) && (troopers[i].tagID.number > 0)) {
			d = modulus(troopers[i].m_kinematics.pos - m_pos);
			if (d < 30.0) 
				troopers[i].closeEnoughToBeDrawn = true;
			else 
				troopers[i].closeEnoughToBeDrawn = false;
			troopers[i].life.dstToCure = modulus(troopers[i].m_kinematics.pos - c_pos);
		}
	}	
}

#endif
