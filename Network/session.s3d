#include "network.s3d"
#include "../System/System.s3d"
// #include "../Participants/participants.s3d"

class Session : Network {
	var numPlayers;

	signUp(success);
	queryParticipants(players);

	askServerFor(cmd);
};

function Session::signUp(success) {
	// Wait for an ID from server
	force_receiveTCP(&dataRcv);
	// TODO: server report couldn connect
	m_id = dataRcv[2];
	// TODO: if (m_id != SERVER_FULL) {
		m_pdu = PDUClass(m_id);		// creates an PDU object

		// Ask for a name 
		askServerFor(NAME_ME_PDU);
		// Wait for a name 
		force_receiveTCP(&m_badass_name);
		success = true;
	// TODO: } else {
		// TODO: success = false;
	// TODO: }

}


function Session::queryParticipants(controller) {
	// Ask for number of players 
	askServerFor(LIST_RQ_PDU);
	
	// Wait for Number of players
	force_receiveTCP(&dataRcv);
	numPlayers = len(dataRcv) - 2;
	controller.availables = numPlayers;
	// Wait for players' names
	var p_id;
	var p_idx;
	OutputLN();
	OutputLN("numPlayers ", numPlayers);
	OutputLN("dataRcv ", dataRcv);
	for (var i = 0; i < numPlayers; i++) {
		var player_name;
		force_receiveTCP(&player_name);
		p_id = dataRcv[2 + i];
		p_idx = p_id - 1;
		if (p_id == m_id) {
			controller.participants[p_idx] = Myself();
		} else {
			controller.participants[p_idx] = Enemy();
		}
		controller.participants[p_idx].tagID.number = p_id;
		controller.participants[p_idx].tagID.name = player_name;
		OutputLN("id ", m_id, ", p_idx ", p_idx, ", name ", player_name);
		// players.availability[dataRcv[2] + i - 1] = 1;
		// players.aliases[dataRcv[2] + i - 1] = player_name;
	}

	// players.myID = m_id;
	// players.myAlias = m_badass_name;
}

function Session::askServerFor(cmd) {
	m_pdu.command2[0] = cmd;
	sendTCP(m_pdu.command2);
}


