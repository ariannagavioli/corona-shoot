/* Include s3d symbols */
#include <Script3d.h>
#include <Camera.s3d.h>
#include <./Level/level.s3d>
#include <./Player/player.s3d>
#include <./Network/session.s3d>

/* Set global scene parameters */
SET SCENE_FOV  = 60;
SET SCENE_NEAR = 0.5;
SET SCENE_FAR  = 1000;


// TODO: put your global variables here


/* Camera globals */
var CamPos = [0.0, 5.0, 30.0]; 	// camera position

/* Light globals */
var Light0;
var PosL = [0.0, 10.0, 10.0];	// default light position


/* Function declarations */
function CameraMoveMouse();
function DrawGrid(col, size);

/* GLOBAL VARIABLES */
var curr_player;
var curr_level;
var camera;

// Network
#define SERVER_IP 	"34.67.36.159" 	// Google VM
// #define SERVER_IP 	"192.168.43.100"	// Raspberry Pi
#define SERVER_PORT 80					// TCP Port
var m_session;


// Participants
#define MAX_NUM_PLAYERS 20
var playerCluster;

function OnDownload()
{
	// Download resources here;
	FileDownload("XVRResources.zip");
}

function OnInit(params)
{
	/* initialize camera */
	CameraGetCurrent().SetPosition(CamPos);

	/* initialize light */
	Light0 = CVmLight();
	Light0.SetPosition(PosL);
	Light0.SetDiffuse(1, 1, 1);
	Light0.Enable();	

	// Our initializations
	
	setFrameRate(60);
	
	curr_level = level();
	curr_level.init("level.txt");
	
	curr_player = player();
	curr_player.init();
	curr_player.setPosition([2,0,2]);

	playerCluster = Participants(MAX_NUM_PLAYERS);
	var successfulSignUp = false;
	m_session = Session();
	m_session.connectTCP(SERVER_IP, SERVER_PORT);
	m_session.signUp(&successfulSignUp);
	// TODO: Window for server rejection
	// TODO: if (successfulSignUp) {
		 m_session.queryParticipants(&playerCluster);
	// TODO: } else {
		// TODO: OutputLN("Server full");
	// TODO: }

}



function OnFrame()
{
	/* manage camera */
//	CameraMoveMouse();

	SceneBegin();

	DrawGrid([0.5, 0.5, 0.5], 100);
	
	/* Debug camera view */
	if(keypressed(VK_LCONTROL)){
		curr_player.debug_mode();
	}
	
	if(curr_player.debug){
		CameraMoveMouse();
	}

	curr_player.update();

	// Our drawings
	curr_level.draw();
	// Draw all Participants
	playerCluster.drawEmAll();	
	curr_player.draw();
	
	

	SceneEnd();
}



function DownloadReady(RequestID)
{
	// TODO
}



function OnTimer()
{
	// TODO:
}


function OnEvent(eventID, wparam, lparam){
	// TODO: put your events handling code here
}

function OnError(){
	// TODO: put your errors handling code here
}


function OnExit()
{
	// TODO: put your cleanup code here
	m_session.closeTCP();
}



// Camera manager (using mouse)
function CameraMoveMouse()
{	

	CameraMoveMouse_MBL_LC();

}



function DrawGrid(col, size)
{
	/* let's not mess up current OpenGL status */
	glPushAttrib(GL_LIGHTING_BIT | GL_LINE_BIT | GL_CURRENT_BIT);
	
	glLineWidth(1);
	glDisable(GL_LIGHTING);
	glColor(col);
	var max = size / 2.0;
	var min = -max;	
	var step = size / 10.0;
	
	glBegin(GL_LINES);
		for (var i = min; i <= max; i += step)
		{
			glVertex(i, 0, max);
			glVertex(i, 0, min);
			
			glVertex(max, 0, i);
			glVertex(min, 0, i);
		}
	glEnd();
	
	/* polite restoration of previous OpenGL status */
	glPopAttrib();
}
