/* Include s3d symbols */
#include <Script3d.h>
#include <Camera.s3d.h>
#include <./Level/level.s3d>
#include <./Player/player.s3d>
#include <./Network/session.s3d>
#include <./System/System.s3d>
#include <./Manager/Manager.s3d>
#include <./RenderEntity/RenderEntity.s3d>
/* Set global scene parameters */
SET SCENE_FOV  = 60;
SET SCENE_NEAR = 0.5;
SET SCENE_FAR  = 1000;

// TODO: put your global variables here

/* Camera globals */
var CamPos = [0.0, 5.0, 30.0]; 	// camera position

/* Light globals */
var Light0;
//var PosL = [0.0, 10.0, 10.0];	// default light position


/* Function declarations */
function CameraMoveMouse();
function DrawGrid(col, size);

/* GLOBAL VARIABLES */
var curr_player;
var curr_level;
var ammoBox;
// Network
#define SERVER_IP 	"34.67.36.159" 	// Google VM
// #define SERVER_IP 	"192.168.43.100"	// Raspberry Pi
#define SERVER_PORT 80					// TCP Port
var m_session = Session();
var m_index;
var m_system;
var m_res;

// Participants
#define MAX_NUM_PLAYERS 20
var m_manager;

function OnDownload()
{
	// Download resources here;
	FileDownload("XVRCollada.dll");
	FileDownload("libcollada14dom21.dll");
	FileDownload("XVRResources.zip");
}

function OnInit(params)
{
	/* initialize camera */
	CameraGetCurrent().SetPosition(CamPos);	

	// Our initializations
	setFrameRate(60);
	
	curr_level = level();
	curr_level.init("level.txt");

	m_system = System();
	m_res = ResourceManager("level.txt");

	m_manager = Manager(MAX_NUM_PLAYERS);

	m_session.connectTCP(SERVER_IP, SERVER_PORT);
	m_session.signUp(NULL);
	m_session.queryParticipants(&m_manager);

	m_index = m_session.m_id - 1;
	m_manager.participants[m_index].setBoundingBox(m_system.TD_manager.getBoundingBox());
	/* Randomly spawn the current player in the maze */
	curr_level.setRandomPosition(m_manager.participants[m_index]);
	m_system.audioFX.PlayCoutinDownFX();
	m_system.audioFX.playAmbient();
	m_session.sendKinematics(TROOPER_KINEMATICS_PDU, m_manager.Participants[m_index]);
}



function OnFrame()
{
	if (m_manager.allowAccess) {
		/*Player Interaction*/
		m_system.moveTrooper(m_manager.participants[m_index], curr_level);
		m_system.pointOfView(m_manager.participants[m_index]);
		m_system.selectWeapon(m_manager.Participants[m_index]);
		m_system.shoot(m_manager.Participants[m_index]);
		m_system.reload(m_manager.Participants[m_index]);
		m_system.updateHealth(m_session, m_manager.Participants[m_index]);

		/* Physics */
		m_system.computeDistances(m_manager.Participants, m_index, m_res.getCurePos());
		m_system.updateBullet(m_manager.Participants, m_index, curr_level);

		/* Network */
		m_system.sendKinematics(TROOPER_KINEMATICS_PDU, &m_session, m_manager.Participants[m_index]);			
		m_system.sendKinematics(BULLET_KINEMATICS_PDU, &m_session, m_manager.Participants[m_index].ammo);
		m_system.sendEvent(&m_session, m_manager.Participants[m_index]);

		/* code */
		SceneBegin();
		curr_level.draw();
		m_system.showMyInfo(m_manager.participants[m_index]); 
		m_system.drawResource(m_res, m_manager.participants[m_index]);
		m_system.showHelp();

		var j = 0;
		for (var i = 0; i < MAX_NUM_PLAYERS; ++i) {
			/* Just the troopers with id bigger than 0 */
			// if (m_manager.participants[i].tagID.number > 0) {
			if (m_manager.ToDrawOrNotToDraw(i)) {
				/* COMPULSARY SYSTEMS FOR MYSELF*/
				m_system.updateTrooper(m_manager.participants[i]);
				// Our drawings
				m_system.drawTrooper(m_manager.participants[i], m_manager.participants[m_index]);
			}
			if (m_manager.participants[i].tagID.number > 0) {
				m_system.showDistanceTable(j, m_manager.participants[i]);
				j++;
			}
		}
		SceneEnd();
		m_system.audioFX.playAmbient();
	} else {
		SceneBegin();
		ConsoleWaiting();
		SceneEnd();
		if(m_manager.availables > 1) m_manager.allowAccess = true;
	}
}



function DownloadReady(RequestID)
{
	// TODO
}



function OnTimer()
{
	// TODO:
	var recvData = NULL;
	m_session.receiveTCP(&recvData);
	if (recvData != NULL) {

		/* Updating enemies kinematics */
		if(recvData[0] == TROOPER_KINEMATICS_PDU) {
			var incoming_id = recvData[1] - 1;
			m_manager.participants[incoming_id].m_kinematics.pos[0] = recvData[2];
			m_manager.participants[incoming_id].m_kinematics.pos[1] = recvData[3];
			m_manager.participants[incoming_id].m_kinematics.pos[2] = recvData[4];
			m_manager.participants[incoming_id].m_kinematics.vel = recvData[5];
			m_manager.participants[incoming_id].m_kinematics.angle = recvData[7];
		}

		// Switch enemy's weapon 
		if(recvData[0] == WEAPON_SWITCH_PDU) {
			var incoming_id = recvData[1] - 1;
			m_manager.participants[incoming_id].ammo.type = 1 - m_manager.participants[incoming_id].ammo.type;
		}

		// Enemy's bullet trajectory 
		if(recvData[0] == BULLET_KINEMATICS_PDU) {
			var incoming_id = recvData[1] - 1;
			m_manager.participants[incoming_id].ammo.m_kinematics.pos[0] = recvData[2];
			m_manager.participants[incoming_id].ammo.m_kinematics.pos[1] = recvData[3];
			m_manager.participants[incoming_id].ammo.m_kinematics.pos[2] = recvData[4];
			// m_manager.participants[incoming_id].ammo.life = recvData[5];
		}

		// Enemy's fire
		if(recvData[0] == FIRE_AMMO_PDU) {
			var incoming_id = recvData[1] - 1;
			m_manager.participants[incoming_id].ammo.fire = true;
			m_manager.participants[incoming_id].ammo.alive = true;
		}

		// Enemy's bullet ended 
		if(recvData[0] == AMMO_LIFE_ENDED) {
			var incoming_id = recvData[1] - 1;
			m_manager.participants[incoming_id].ammo.alive = false;
		}

		// Jumped event on the enemies
		if(recvData[0] == JUMP_SCREAM_PDU) {
			var incoming_id = recvData[1] - 1;
			m_manager.participants[incoming_id].m_kinematics.just_jumped = true;	
		}

		/* Received who was injuried */
		if(recvData[0] == INJURIED_PDU) {
			var incoming_id = recvData[2];
			if (incoming_id == m_index) {
				m_manager.participants[incoming_id].life.life -= recvData[3];
				if (m_manager.participants[incoming_id].life.life <= 0) {
					m_manager.participants[incoming_id].life.life = 0;
				}
			}
		}

		/* Received who won */
		if (recvData[0] == WINNER_PDU) {
			m_manager.participants[m_index].winner = recvData[2];
		}

		/* Server says there's a new guy in town */
		if(recvData[0] == LIST_RQ_PDU) {
			var name;
			m_session.force_receiveTCP(&name);
			m_manager.addParticipant(recvData[2], name);
			m_session.sendKinematics(TROOPER_KINEMATICS_PDU, m_manager.participants[m_index]);
		}

		/* Server says one just left*/
		if(recvData[0] == LIST_RM_PDU) {
			m_manager.rmParticipant(recvData[2]);
		}
	}
}


function OnEvent(eventID, wparam, lparam){
	// TODO: put your events handling code here
}

function OnError(){
	// TODO: put your errors handling code here
}


function OnExit()
{
	// TODO: put your cleanup code here
	m_session.closeTCP();
}



// Camera manager (using mouse)
function CameraMoveMouse()
{	

	CameraMoveMouse_MBL_LC();

}



function DrawGrid(col, size)
{
	/* let's not mess up current OpenGL status */
	glPushAttrib(GL_LIGHTING_BIT | GL_LINE_BIT | GL_CURRENT_BIT);
	
	glLineWidth(1);
	glDisable(GL_LIGHTING);
	glColor(col);
	var max = size / 2.0;
	var min = -max;	
	var step = size / 10.0;
	
	glBegin(GL_LINES);
		for (var i = min; i <= max; i += step)
		{
			glVertex(i, 0, max);
			glVertex(i, 0, min);
			
			glVertex(max, 0, i);
			glVertex(min, 0, i);
		}
	glEnd();
	
	/* polite restoration of previous OpenGL status */
	glPopAttrib();
}
